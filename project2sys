#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <cmath>
int srav = 0;
int perep = 0;
void printMassiv(int* mas, int num)
{
	for (int i = 0; i < num; i++) {
		std::cout << mas[i] << " ";
	}
	std::cout << std::endl;
}
void bubleSort(int * mass_first,int len) {
	int* mass = new int[len];
	for (int i = 0; i < len; i++) {
		mass[i] = mass_first[i];
	}
	int sr = 0, pr = 0;
	for (int j = 0; j < len; j++) {
		for (int i = 1; i < len - j; i++) {
			if (mass[i] > mass[i - 1]) {
				std::swap(mass[i],mass[i-1]);
				pr += 3;
			}
			sr++;
		}
		/*for (int i = 0; i < len; i++) {
			std::cout << mass[i] << " ";
		}
		std::cout << "\n";*/
	}
	std::cout << "\nBubleSort: \nМассив: \n";
	for (int i = 0; i < len; i++) {
		std::cout << mass_first[i] << " ";
	}
	std::cout << "\nОтсортированный: \n";
	for (int i = 0; i < len; i++) {
		std::cout << mass[i] << " ";
	}
	std::cout << "\nСравнений : " << sr << std::endl << "Присваиваний : " << pr << std::endl;
}
void selectSort(int* mass_first,int len) {
	int* mass = new int[len];
	for (int i = 0; i < len; i++) {
		mass[i] = mass_first[i];
	}
	int sr = 0, pr = 0;
	int min = mass[0],pos = 0;
	for (int j = 0; j < len-1; j++) {
		min = mass[j];
		pos = j;
		for (int i = pos+1; i < len; i++) {
			if (mass[i] < mass[pos]) {
				pos = i;
			}
			sr++;
		}
		if (pos != j) {
			std::swap(mass[j], mass[pos]);
			pr += 3;
		}
		/*for (int i = 0; i < len; i++) {
			std::cout << mass[i] << " ";
		}
		std::cout << "\n";*/
	}
	std::cout << "\n\nSelectSort: \nМассив: \n";
	for (int i = 0; i < len; i++) {
		std::cout << mass_first[i] << " ";
	}
	std::cout << "\nОтсортированный: \n";
	for (int i = 0; i < len; i++) {
		std::cout << mass[i] <<" ";
	}
	std::cout << "\nСравнений : " << sr << std::endl << "Присваиваний : " << pr << "\n\n";
}
void mergeSortOld(int* mass_first, int len) {
	int* mass = new int[len];
	for (int i = 0; i < len; i++) {
		mass[i] = mass_first[i];
	}
	int* buff = new int[len];
	int step = 1;
	int sr = 0, pr = 0;
	
	std::cout << "\n\nMergeSort: \nМассив: \n";
	printMassiv(mass_first,len);
	std::cout << "\nСортировка: \n";
	while (step < len) {
		int index = 0;
		int l = 0;
		int m = l + step;
		int r = l + step * 2;
		while (l < len) {
			m = m < len ? m : len;
			r = r < len ? r : len;
			int i1 = l, i2 = m;
			while(i1 < m && i2 < r) {
				if (mass[i1] < mass[i2]) 
					buff[index++] = mass[i1++];
				else 
					buff[index++] = mass[i2++];
				sr++;
			}
			while (i1 < m) {
				buff[index++] = mass[i1++];
			}
			while (i2 < r) {
				buff[index++] = mass[i2++];
			}
			
			l += step * 2;
			m += step * 2;
			r += step * 2;
		}
		std::cout << "Шаг : " << step*2 << " - ";
		for (int i = 0; i < len; i++) {// перезапись
			mass[i] = buff[i];
			pr++;
			std::cout << mass[i] <<" ";
			
		}
		std::cout << "\n";
		step *= 2;
	}
	////----////
	std::cout << "\nОтсортированный: \n";
	printMassiv(mass, len);
	std::cout << "\nСравнений : " << sr << "\nПрисваиваний : " << pr << std::endl;
}
void DFP(int* mass_vs, int* mass_mn, int len) {
	double* mass_sec = new double[len];
	double compll = 2;
	double vesh = 1;
	double pi = 3.1415926535;

}
std::string Summ(std::string A, std::string B) {
	std::string C;
	while (A.length() != B.length()) {
		if (A.length() < B.length())
			A = '0' + A;
		else
			B = '0' + B;
	}
	int point = 0;
	char dop;
	for (int i = A.length() - 1; i >= 0; i--) {
		int znacA = A[i] - '0';
		int znacB = B[i] - '0';
		int calc = znacA + znacB + point;
		if (calc > 9) {
			dop = calc % 10 + '0';
			point = calc / 10;
			C = dop + C;
		}
		else {
			dop = calc + '0';
			C = dop + C;
			point = 0;
		}
	}
	if (point)
		C = '1' + C;
	return C;
}
std::string Divide(std::string A, std::string B) {
	std::string C;
	while (A.length() != B.length()) {
		if (A.length() < B.length())
			A = '0' + A;
		else
			B = '0' + B;
	}
	int point = 0;
	char dop;
	for (int i = A.length() - 1; i >= 0; i--) {
		char calc = 10 + A[i] - B[i] - point;
		if (calc < 10) {
			dop = calc % 10 + '0';
			C = dop + C;
			point = 1;
		}
		else {
			dop = calc % 10 + '0';
			C = dop + C;
			point = 0;
		}
	}
	while (C.length() != 0)
		if (C[0] == '0')
			C.erase(0, 1);
		else
			break;
	if (C.length() == 0)
		return "0";
	if (point) {
		return "-" + Divide(B, A);
	}
	return C;
}
std::string Multiply(std::string A, std::string B) {
	std::string C;
	int summa = 0,
		mnozh = 0;
	/*
	while (A.length() != B.length()) {
		if (A.length() < B.length())
			A = '0' + A;
		else
			B = '0' + B;
	}*/
	char dop;
	int zerobackA = 0, zerobackB = 0;
	for (int i = A.length() - 1; i >= 0; i--) {
		if (A[i] == '0') {
			zerobackA++;
			A.erase(i, 1);
		}
		else
			break;
	}
	for (int i = B.length() - 1; i >= 0; i--) {
		if (B[i] == '0') {
			zerobackB++;
			B.erase(i, 1);
		}
		else
			break;
	}
	for (int i = A.length() - 1; i >= 0; i--) {
		std::string Buf = "";
		int znacA = A[i] - '0';
		int point = 0;
		for (int j = B.length() - 1; j >= 0; j--) {
			int znacB = B[j] - '0';
			int calc = znacA * znacB + point;
			mnozh++;
			if (calc >= 10) {
				dop = calc % 10 + '0';
				point = calc / 10;
				Buf = dop + Buf;
			}
			else {
				dop = calc + '0';
				Buf = dop + Buf;
				point = 0;
			}
		}
		if (point) {
			dop = point + '0';
			Buf = dop + Buf;
		}
		for (int j = A.length() - 1 - i; j > 0; j--) {
			Buf = Buf + '0';
		}
		while (Buf.length() != 0)
			if (Buf[0] == '0')
				Buf.erase(0, 1);
			else
				break;
		
			summa++;
		C = Summ(C, Buf);
	}
	if (A.length() == 1 || B.length() == 1)
		summa = 1;
	for (int i = 0; i < (zerobackA + zerobackB); i++) {
		C += '0';
	}
	std::cout << "Summa" << summa-1 << " Proizved" << mnozh << "\n";
	return C;
}
int svertka(int* a, int* b, int* c, int size_a, int size_b, int size_c) {
	for (int k = 0; k < size_c; k++) {
		std::cout << "C[" << k << "]=";
		if (k < size_b) {
			for (int i = 0; i <= k && i < size_a; i++) {
				c[k] += a[i] * b[k - i];
				std::cout << "+A[" << i << "]*B[" << k - i << "]";
			}

		}
		else {
			for (int i = k - size_b + 1; i < size_a; i++) {
				c[k] += a[i] * b[k - i];
				std::cout << "+A[" << i << "]*B[" << k - i << "]";
			}
		}
		std::cout << "=" << c[k] << std::endl;
	}
	return c[size_c - 1];
}
void merge(int arr[], int sizeForArr, int L[], int sizeForL, int R[], int sizeForR){
	int i = 0;
	int j = 0;
	while (i < sizeForL || j < sizeForR){
		if (i < sizeForL && j < sizeForR){
			if (L[i] <= R[j]){
				arr[i + j] = L[i];
				++i;
				++perep;
			}
			else{
				arr[i + j] = R[j];
				++j;
				++perep;
			}
			++srav;
		}
		else if (i < sizeForL){
			arr[i + j] = L[i];
			++i;
			++perep;
		}
		else if (j < sizeForR){
			arr[i + j] = R[j];
			++j;
			++perep;
		}
	}
}
void merge_sort(int arr[], int size){
	if (size > 1){
		int middle = size / 2;
		int rem = size - middle;
		int* L = new int[middle];
		int* R = new int[rem];
		for (int i = 0; i < size; ++i){
			if (i < middle){
				L[i] = arr[i];
			}
			else{
				R[i - middle] = arr[i];
			}
		}
		merge_sort(L, middle);
		merge_sort(R, rem);
		merge(arr, size, L, middle, R, rem);
	}
}
int main()
{
	setlocale(LC_ALL, "Russian");
	int lenA = 8;
	//std::cin >> lenA;
	int* massA = new int [lenA];
	for (int i = 0; i < lenA; i++) {
		massA[i] = rand() % 9 + 1;
	}
	mergeSortOld(massA,lenA);
	/*std::cout <<"\nМассив:\n";
	printMassiv(massA, lenA);
	merge_sort(massA,lenA);
	std::cout << "Отсортированный:\n";
	printMassiv(massA, lenA);
	std::cout << "Сравнений " << srav << "\nПрисваиваний " << perep <<"\n";
	*/
	system("pause");
	return 0;
}

/*
	int* mass, *mass_vs, *mass_mn;
	int len;
	std::cin >> len;
	mass = new int[len];
	mass_vs = new int[len];
	mass_mn = new int[len];
	for (int i = 0; i < len; i++) {
		std::cin >> mass[i];
	}
	*/
	//bubleSort(mass, len);
	//selectSort(mass,len);
	//mergeSort(mass, len);
	/*
	DFP(mass_vs,mass_mn, len);
	std::cout << mass_vs[0];

	std::string A, B;
	std::cin >> A >> B;
	//Summ(A, B) // Divide(A,B)
	std::cout  << Multiply(A,B) << "\n";

	return 0;
	*/
	//int size_A = 2, size_B = 3;
	/*
	int size_C = size_A + size_B - 1;
	int* a = new int [size_A];
	int* b = new int [size_B];
	int* c = new int [size_C];

	for (int i = 0; i < A; i++) {
		a[i] = rand() % 9 + 1;
	}

	//a[0] = 9; a[1] = 7; a[2] = 8; a[3] = 3; a[4] = 2;
	//b[0] = 6; b[1] = 6; b[2] = 3;

	a[0] = 9; a[1] = 7; b[0] = 6; b[1] = 6; b[2] = 3;

	printMassiv(a, size_A);
	printMassiv(b, size_B);

	int first_element;
	if (size_A > size_B){
		first_element = svertka(b, a, c, size_B, size_A, size_C);
	}
	else{
		first_element = svertka(a, b, c, size_A, size_B, size_C);
	}
	printMassiv(c, size_C);
	*/
